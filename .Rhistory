devtools::build()
remove.packages(StatComp20027)
remove.packages("StatComp20027")
iinstall.packages("E:/Documents/qq_file/StatComp20027_1.1.tar.gz",repo=NULL)
install.packages("E:/Documents/qq_file/StatComp20027_1.1.tar.gz",repo=NULL)
devtools::build()
devtools::build()
rm(list=ls())
library(MASS)
mardia.test <- function(x,alpha=0.05) {
m <- nrow(x)
p <- ncol(x)
# mle of covariance matrix
var.hat <- var(x)*(m-1)/m
inve <- solve(var.hat)
ave <- apply(x, 2, mean)
mat <- matrix(rep(ave, m), ncol=p,byrow = TRUE)
x <- x-mat
S <- x%*%inve%*%t(x)
# compute mardia statistic
M <- sum(S^3)/(m*6)
# degree of freedom of asymptotic distribution
degree <- p*(p+1)*(p+2)/6
# p-value of the mardia statistic
pchisq(M, degree)
}
alpha <- .1
n <- 100
mm <- 1000
epsilon <- c(seq(0.0, .15, .01), seq(.15, 0.95, .05))
N <- length(epsilon)
pwr <- numeric(N)
#critical value for the skewness test
for (j in 1:N) { #for each epsilon
e <- epsilon[j]
sktests <- numeric(mm)
for (i in 1:mm) { #for each replicate
sig <- sample(c(0, 1), replace = TRUE, size = n, prob = c(1-e, e))
n1 <- sum(sig)
n2 <- n - n1
x1 <- mvrnorm(n, c(0,0),matrix(c(1,0.3,0.3,1.5),ncol=2))
x2 <- mvrnorm(n, c(0,0), matrix(c(10,0.3,0.3,15),ncol=2))
x <- rbind(x1[1:n1,],x2[1:n2,])
sktests[i] <- ((mardia.test(x)) >= 1-alpha)
}
pwr[j] <- mean(sktests)
}
#plot power vs epsilon
plot(epsilon, pwr, type = "b",
xlab = bquote(epsilon), ylim = c(0,1))
abline(h = .1, lty = 3)
se <- sqrt(pwr * (1-pwr) / mm) #add standard errors
lines(epsilon, pwr+se, lty = 3)
lines(epsilon, pwr-se, lty = 3)
library(bootstrap)
n <- nrow(law)
theta.jack <- numeric(n)
for (i in 1:n) {
data <- law[-i,]
theta.jack[i] <- cor(data[,1],data[,2])
}
theta.hat <- cor(law[,1],law[,2])
# estimate bias of theta.hat using jackknife method
bias.jack <- (n-1)*(mean(theta.jack)-theta.hat); round(bias.jack,4)
# estimate standard error of theta.hat using jackknife method
se.jack <- sqrt((n-1)^2*var(theta.jack)/n); round(se.jack,4)
library(boot)
set.seed(123)
data <- aircondit
alpha <- 0.05
N <- 1e3
est <- function(dat, ind) {
1/mean(dat[ind,1])
}
boot.obj <- boot(data=data,statistic = est,R=N)
boot.ci(boot.obj,conf=1-alpha,type=c("basic", "norm", "perc", "bca"))
rm(list=ls())
library(bootstrap)
data <- scor
estim <- function (dat) {
n <- nrow(dat)
sig <- (n-1)*var(dat)/n
vs <- eigen(sig)
lambdas <- vs$values
lambdas[1]/sum(lambdas)
}
n <- nrow(data)
theta.hat <- estim(data)
theta.jack <- numeric(n)
for (i in 1:n) {
x <- data[-i,]
theta.jack[i] <- estim(x)
}
# estimate the bias of theta.hat using jackknife method
bias.jack <- (n-1)*(mean(theta.jack)-theta.hat); round(bias.jack,4)
# estimate the standard error using jackknife method
se.jack <- sqrt((n-1)^2*var(theta.jack)/n); round(se.jack,4)
rm(list=ls())
library(DAAG); attach(ironslag)
a <- seq(10, 40, .1) #sequence for plotting fits
L1 <- lm(magnetic ~ chemical)
yhat1 <- L1$coef[1] + L1$coef[2] * a
L2 <- lm(magnetic ~ chemical + I(chemical^2))
yhat2 <- L2$coef[1] + L2$coef[2] * a + L2$coef[3] * a^2
L3 <- lm(log(magnetic) ~ chemical)
logyhat3 <- L3$coef[1] + L3$coef[2] * a
yhat3 <- exp(logyhat3)
L4 <- lm(log(magnetic) ~ log(chemical))
logyhat4 <- L4$coef[1] + L4$coef[2] * log(a)
n <- length(magnetic) #in DAAG ironslag
# divide the data into to N groups
# each group contains two data point
N <- round(n/2)
e1 <- e2 <- e3 <- e4 <- matrix(0, nrow=N, ncol=2)
num <- matrix(sample(1:n,2*N),ncol=2,nrow=N)
# for N-fold cross validation
# fit models on leave-two-out samples
for (k in 1:N) {
y <- magnetic[-num[k,]]
x <- chemical[-num[k,]]
J1 <- lm(y ~ x)
yhat1 <- J1$coef[1] + J1$coef[2] * chemical[num[k,]]
e1[k,] <- magnetic[num[k]] - yhat1
J2 <- lm(y ~ x + I(x^2))
yhat2 <- J2$coef[1] + J2$coef[2] * chemical[num[k,]] +
J2$coef[3] * chemical[num[k,]]^2
e2[k,] <- magnetic[num[k,]] - yhat2
J3 <- lm(log(y) ~ x)
logyhat3 <- J3$coef[1] + J3$coef[2] * chemical[num[k,]]
yhat3 <- exp(logyhat3)
e3[k,] <- magnetic[num[k,1]] - yhat3
J4 <- lm(log(y) ~ log(x))
logyhat4 <- J4$coef[1] + J4$coef[2] * log(chemical[num[k,]])
yhat4 <- exp(logyhat4)
e4[k,] <- magnetic[num[k,]] - yhat4
}
lapply(list(e1,e2,e3,e4), function(x) {
a <- apply(x^2,1,sum)
mean(a)
})
detach(ironslag)
rm(list=ls())
set.seed(1234)
count5test <- function(x, y) {
X <- x - mean(x)
Y <- y - mean(y)
outx <- sum(X > max(Y)) + sum(X < min(Y))
outy <- sum(Y > max(X)) + sum(Y < min(X))
# return 1 (reject) or 0 (do not reject H0)
return(as.integer(max(c(outx, outy)) > 5))
}
permutation <- function(z, R=1e3) {
N = length(z)
s = replicate(R,{
idx = sample(1:N, N/2, replace = FALSE)
x = z[idx]
y = z[-idx]
count5test(x,y)
})
mean(s)
}
n1 <- 50
n2 <- 20
N <- n1 + n2
mu1 <- mu2 <- 0
sigma1 <- 1
sigma2 <- 1
m <- 1e3
# use permutation
permutation.test <- replicate(m, expr = {
x <- rnorm(n1, mu1, sigma1)
y <- rnorm(n2, mu2, sigma2)
x <- x - mean(x)
y <- y - mean(y)
z <- c(x, y)
permutation(z)
} )
count5.test <- replicate(m, expr = {
x <- rnorm(n1, mu1, sigma1)
y <- rnorm(n2, mu2, sigma2)
x <- x - mean(x)
y <- y - mean(y)
count5test(x,y)
} )
mean(permutation.test<0.05)
mean(count5.test)
rm(list = ls())
set.seed(7)
dlaplace <- function(x) {
0.5*exp(-abs(x))
}
qlaplace <- function(x) {
y <- x
for (i in 1:length(x)) {
if(x[i]>=0.5) {
y[i] <- qexp(2*x[i]-1, rate=1)
}
else {
y[i] <- -qexp(1-2*x[i], rate=1)
}
}
return(y)
}
rw.Metropolis <- function(sigma, x0, N) {
x <- numeric(N)
x[1] <- x0
u <- runif(N)
k <- 0
for (i in 2:N) {
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (dlaplace(y) / dlaplace(x[i-1])))
x[i] <- y
else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
N <- 2000
sigma <- c(.05, .5, 2,  16)
x0 <- 25
rw1 <- rw.Metropolis(sigma[1], x0, N)
rw2 <- rw.Metropolis(sigma[2], x0, N)
rw3 <- rw.Metropolis(sigma[3], x0, N)
rw4 <- rw.Metropolis(sigma[4], x0, N)
#number of candidate points rejected
no.reject <- data.frame(sigma=sigma,no.reject=c(rw1$k, rw2$k, rw3$k, rw4$k))
knitr::kable(no.reject,format='latex')
par(mfrow=c(2,2))  #display 4 graphs together
refline <- qlaplace(c(.025, .975))
rw <- cbind(rw1$x, rw2$x, rw3$x,  rw4$x)
for (j in 1:4) {
plot(rw[,j], type="l",
xlab=bquote(sigma == .(round(sigma[j],3))),
ylab="X", ylim=range(rw[,j]))
abline(h=refline)
}
par(mfrow=c(1,1)) #reset to default
a <- c(.05, seq(.1, .9, .1), .95)
Q <- qlaplace(a)
rw <- cbind(rw1$x, rw2$x, rw3$x, rw4$x)
mc <- rw[501:N, ]
Qrw <- apply(mc, 2, function(x) quantile(x, a))
qq <- data.frame(round(cbind(Q, Qrw), 3))
names(qq) <- c('True','sigma=0.05','sigma=0.5','sigma=2','sigma=16')
knitr::kable(qq,format='latex',) #latex format
rm(list=ls())
library(nloptr)
mle.fun <- function(x,y,n.A=444,n.B=132,nOO=361,nAB=63) {
r1 = 1-sum(y); r = 1-sum(x)
nBB = n.B*y[2]^2/(2*y[2]*r1+y[2]^2); nAA = n.A*y[1]^2/(y[1]^2+2*y[1]*r1)
result <- -2*nBB*log(x[2])-2*nOO*log(r)-(n.A-nAA)*log(2*x[1]*r)-
nAB*log(2*x[1]*x[2])-2*nAA*log(x[1])-(n.B-nBB)*log(2*x[2]*r)
result
}
constrain <- function(x,y,n.A=444,n.B=132,nOO=361,nAB=63) {
return(sum(x)-0.999999)
}
opts = list("algorithm"="NLOPT_LN_COBYLA", "xtol_rel"=1.0e-8)
r = matrix(0,1,2); r = rbind(r,c(0.2,0.35))#
j = 2; mle = NULL
while (sum(abs(r[j,]-r[j-1,]))>1e-8) {
res = nloptr( x0=c(0.3,0.25), eval_f=mle.fun,
lb = c(0,0), ub = c(1,1), eval_g_ineq = constrain,
opts = opts, y=r[j,],n.A=444,n.B=132,nOO=361,nAB=63 )
j = j+1
r = rbind(r,res$solution)
mle = c(mle,constrain(x=r[j,],y=r[j-1,]))
}
r
rm(list=ls())
attach(mtcars)
formulas <- list(
mpg ~ disp,
mpg ~ I(1 / disp),
mpg ~ disp + wt,
mpg ~ I(1 / disp) + wt
)
regressions <- vector("list", length(formulas))
for (i in length(formulas)) {
regressions[[i]]<-lm(formulas[[i]], data=mtcars)
}
regressions
regs <- lapply(formulas, function(x) lm(x, data=mtcars))
detach(mtcars)
regs
library(Rcpp); library(microbenchmark)
set.seed(7)
d.laplace <- function(x) {
0.5*exp(-abs(x))
}
rw.Metropolis <- function(sigma, x0, N) {
x <- numeric(N)
x[1] <- x0
u <- runif(N)
k <- 0
for (i in 2:N) {
y <- rnorm(1, x[i-1], sigma)
if (u[i] <= (d.laplace(y) / d.laplace(x[i-1])))
x[i] <- y
else {
x[i] <- x[i-1]
k <- k + 1
}
}
return(list(x=x, k=k))
}
N <- 2000
sigma <- 4
x0 <- 25.0
rwR = rw.Metropolis(sigma,x0,N)$x[-(1:500)]
rwC = rw_Metropolis(sigma,x0,N)$x[-(1:500)]
devtools::build()
devtools::build()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
devtools::build_vignettes()
devtools::check()
devtools::check()
devtools::build()
knitr::include_graphics('donald.jpg')
time <- seq.Date(as.Date("2020/7/23"), by = "day", length = 45)
data <- read.table("supporting.txt", header = TRUE)
support <- data$C
dis <- data$B
par(mfrow=c(2,1))
plot(time, support, xaxt = "n")
lines(time, support, col = "red")
axis.Date(1, at = time, format = "%Y-%m-%d")
title("Trump`s supporting rate (%)")
plot(time, dis, xaxt = "n")
lines(time, dis, col = "red")
axis.Date(1, at = time, format = "%Y-%m-%d")
title("Strongly disapprove rate (%)")
View(data)
saveRDS(object = data,file="support")
saveRDS(object = data, file="support.rda")
knitr::include_graphics('donald.jpg')
time <- seq.Date(as.Date("2020/7/23"), by = "day", length = 45)
data <- readRDS("data.rds")
time <- seq.Date(as.Date("2020/7/23"), by = "day", length = 45)
data <- readRDS("../data/data.rds")
library(StatComp20027)
time <- seq.Date(as.Date("2020/7/23"), by = "day", length = 45)
data <- data(data)
# read.table("supporting.txt", header = TRUE)
support <- data$C
library(StatComp20027)
time <- seq.Date(as.Date("2020/7/23"), by = "day", length = 45)
data <- data(data)
data
# read.table("supporting.txt", header = TRUE)
support <- data$C
library(StatComp20027)
time <- seq.Date(as.Date("2020/7/23"), by = "day", length = 45)
data(data)
attach(data)
library(StatComp20027)
?svd
q <- 1:2
q*2
rm(list = ls())
mvrnorm <- function(n, mu, Sigma) {
m = length(mu)
mus <- matrix(rep(mu, n), ncol=m, byrow=TREU)
decop <- svd(Sigma)
D <- decop$d
dd <- sqrt(D)
A <- decop$u %*% dd %*% t(decop$v)
u <- matrix(rnorm(m*n), ncol=m)
rn <- u%*%A + mus
rn
}
mvrnorm(10, mu=c(0, 1), Sigma=matrix(c(2,0,0,3), ncol=2))
rm(list = ls())
mvrnorm <- function(n, mu, Sigma) {
m = length(mu)
mus <- matrix(rep(mu, n), ncol=m, byrow=TRUE)
decop <- svd(Sigma)
D <- decop$d
dd <- sqrt(D)
A <- decop$u %*% dd %*% t(decop$v)
u <- matrix(rnorm(m*n), ncol=m)
rn <- u%*%A + mus
rn
}
mvrnorm(10, mu=c(0, 1), Sigma=matrix(c(2,0,0,3), ncol=2))
x <- matrix(c(4,2,2,3), ncol=2)
m <- svd(x)
attach(m)
v
d
u
sqrt(d)
rm(list = ls())
mvrnorm <- function(n, mu, Sigma) {
m = length(mu)
mus <- matrix(rep(mu, n), ncol=m, byrow=TRUE)
decop <- svd(Sigma)
D <- decop$d
dd <- diag(sqrt(D))
A <- decop$u %*% dd %*% t(decop$v)
u <- matrix(rnorm(m*n), ncol=m)
rn <- u%*%A + mus
rn
}
mvrnorm(10, mu=c(0, 1), Sigma=matrix(c(2,0,0,3), ncol=2))
rm(list = ls())
mvrnorm <- function(n, mu, Sigma) {
m = length(mu)
mu.mat <- matrix(rep(mu, n), ncol=m, byrow=TRUE)
decop <- svd(Sigma)
D <- decop$d
dd <- diag(sqrt(D))
A <- decop$u %*% dd %*% t(decop$v)
u <- matrix(rnorm(m*n), ncol=m)
rn <- u %*% A + mu.mat
rn
}
a <- mvrnorm(10, mu=c(0, 1), Sigma=matrix(c(2,0,0,3), ncol=2))
colMeans(a)
rm(list = ls())
mvrnorm <- function(n, mu, Sigma) {
m = length(mu)
mu.mat <- matrix(rep(mu, n), ncol=m, byrow=TRUE)
decop <- svd(Sigma)
D <- decop$d
dd <- diag(sqrt(D))
A <- decop$u %*% dd %*% t(decop$v)
u <- matrix(rnorm(m*n), ncol=m)
rn <- u %*% A + mu.mat
rn
}
a <- mvrnorm(1000, mu=c(0, 1), Sigma=matrix(c(2,0,0,3), ncol=2))
colMeans(a)
rm(list = ls())
mvrnorm <- function(n, mu, Sigma) {
m = length(mu)
mu.mat <- matrix(rep(mu, n), ncol=m, byrow=TRUE)
decop <- svd(Sigma)
D <- decop$d
dd <- diag(sqrt(D))
A <- decop$u %*% dd %*% t(decop$v)
u <- matrix(rnorm(m*n), ncol=m)
rn <- u %*% A + mu.mat
rn
}
a <- mvrnorm(1000, mu=c(0, 1), Sigma=matrix(c(2,0,0,3), ncol=2))
colMeans(a)
apply(a, 1, var)
rm(list = ls())
mvrnorm <- function(n, mu, Sigma) {
m = length(mu)
mu.mat <- matrix(rep(mu, n), ncol=m, byrow=TRUE)
decop <- svd(Sigma)
D <- decop$d
dd <- diag(sqrt(D))
A <- decop$u %*% dd %*% t(decop$v)
u <- matrix(rnorm(m*n), ncol=m)
rn <- u %*% A + mu.mat
rn
}
a <- mvrnorm(1000, mu=c(0, 1), Sigma=matrix(c(2,0,0,3), ncol=2))
colMeans(a)
apply(a, 2, var)
?rt
pi
pow(pi,2.5)
pi^(2.5)
rm(list=ls())
dmvnorm <- function(x, mu, Sigma) {
n <- length(x)
s <- -0.5 * ((x - mu) %*% solve(Sigma) %*% t(x - mu))
d.value <- 1/(sqrt(det(Sigma))*(pi^(n/2)))
d.value*exp(s)
}
dmvnorm(c(0,0), c(0, 0), Sigma=matrix(c(1,0,0,1), ncol=2))
Sigma=matrix(c(1,0,0,1), ncol=2)
solve(Sigma)
c(1,2)%*%Sigam
c(0,2)$*$Sigma
c(0,1)%*%Sigma
t(c(0, 2))
Sigma%*%c(2,3)
rm(list=ls())
dmvnorm <- function(x, mu, Sigma) {
n <- length(x)
s <- -0.5 * ((x - mu) %*% solve(Sigma) %*% (x - mu))
d.value <- 1/(sqrt(det(Sigma))*(pi^(n/2)))
d.value*exp(s)
}
dmvnorm(c(0,0), c(0, 0), Sigma=matrix(c(1,0,0,1), ncol=2))
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::dev_mode()
Off
devtools::document()
devtools::check()
devtools::check()
devtools::document()
devtools::build_vignettes()
devtools::build()
library(StatComp20027)
devtools::build()
library(StatComp20027)
r_mvnorm(12,c(0,1), Sigma=matrix(c(1,0,0,1), ncol=2))
devtools::check()
